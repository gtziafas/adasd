// Generated by gencpp from file robotnik_msgs/alarmmonitor.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_ALARMMONITOR_H
#define ROBOTNIK_MSGS_MESSAGE_ALARMMONITOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct alarmmonitor_
{
  typedef alarmmonitor_<ContainerAllocator> Type;

  alarmmonitor_()
    : type()
    , group()
    , text()
    , seconds_active(0)  {
    }
  alarmmonitor_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , group(_alloc)
    , text(_alloc)
    , seconds_active(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;

   typedef uint64_t _seconds_active_type;
  _seconds_active_type seconds_active;




  typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const> ConstPtr;

}; // struct alarmmonitor_

typedef ::robotnik_msgs::alarmmonitor_<std::allocator<void> > alarmmonitor;

typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor > alarmmonitorPtr;
typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor const> alarmmonitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::alarmmonitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robotnik_msgs': ['/home/kaoutsi/rbcar_ws/src/msgs/robotnik_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06090c09c2c0b7ded878422ee1f908ff";
  }

  static const char* value(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06090c09c2c0b7deULL;
  static const uint64_t static_value2 = 0xd878422ee1f908ffULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/alarmmonitor";
  }

  static const char* value(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# type: error, warning, event\n\
string type\n\
# group: alarm group all alarms of same group will be reset at same time\n\
string group\n\
# text: more explained information about alarm, should include group, time, conditions, etc\n\
string text\n\
# seconds active\n\
uint64 seconds_active\n\
";
  }

  static const char* value(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.group);
      stream.next(m.text);
      stream.next(m.seconds_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alarmmonitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "seconds_active: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.seconds_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_ALARMMONITOR_H
